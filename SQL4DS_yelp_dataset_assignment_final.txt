Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. 
For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. 
You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. 
You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use 
proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding 
where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime 
Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined 
appropriately. In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

SQL CODE:
	
	-- select a count of all records in the table
	SELECT COUNT(*) as num_of_records
	-- specify which table you are selecting from where 'table_name' is the name of the table
	FROM (table_name);


i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

SQL CODE:

	-- select a distinct count of the key where 'key_name' is the name of the key 
	SELECT COUNT(DISTINCT key_name)
	-- specify which table you are selecting from where 'table_name' is the name of the table
	FROM (table_name);


i. Business = 10000 (id)
ii. Hours = 2052 (hours)
iii. Category = 2643 (business_id)
iv. Attribute = 1115 (business_id)
v. Review = 10000 (id)
vi. Checkin = 493 (business_id)
vii. Photo = 10000 (id)
viii. Tip = 537 (user_id)
ix. User = 10000 (id)
x. Friend = 11 (user_id)
xi. Elite_years = 2780 (user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	


3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:

		-- select a count of all records
		SELECT COUNT(*) as num_of_nulls
		-- specify that we want to query the 'user' table
		FROM user
		-- conditions for the records we want to count
		WHERE (id IS NULL)
		OR (name IS NULL)
		OR (review_count IS NULL)
		OR (yelping_since IS NULL)
		OR (useful IS NULL)
		OR (funny IS NULL)
		OR (cool IS NULL)
		OR (fans IS NULL)
		OR (average_stars IS NULL)
		OR (compliment_hot IS NULL)
		OR (compliment_more IS NULL)
		OR (compliment_profile IS NULL)
		OR (compliment_cute IS NULL)
		OR (compliment_list IS NULL)
		OR (compliment_note IS NULL)
		OR (compliment_plain IS NULL)
		OR (compliment_cool IS NULL)
		OR (compliment_funny IS NULL)
		OR (compliment_writer IS NULL)
		OR (compliment_photos IS NULL);


4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	SQL CODE:

		-- select the min, max, and average of the desired column
		SELECT MIN(column_name) as min
			, MAX(column_name) as max
			, AVG(column_name) as mean
		-- specify the table you want to query
		FROM table_name;


	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

		-- select the city column and sum the review_count column to get a complete total for each city
		SELECT city
			, SUM(review_count) AS total_reviews
		-- query the business table
		FROM business
		-- group the data by city so that SUM(review_count) sums up review_count by city
		GROUP BY city
		-- order the results by descending total_reviews
		ORDER BY total_reviews DESC;
	

	Copy and Paste the Result Below:

		+-----------------+---------------+
		| city            | total_reviews |
		+-----------------+---------------+
		| Las Vegas       |         82854 |
		| Phoenix         |         34503 |
		| Toronto         |         24113 |
		| Scottsdale      |         20614 |
		| Charlotte       |         12523 |
		| Henderson       |         10871 |
		| Tempe           |         10504 |
		| Pittsburgh      |          9798 |
		| Montréal        |          9448 |
		| Chandler        |          8112 |
		| Mesa            |          6875 |
		| Gilbert         |          6380 |
		| Cleveland       |          5593 |
		| Madison         |          5265 |
		| Glendale        |          4406 |
		| Mississauga     |          3814 |
		| Edinburgh       |          2792 |
		| Peoria          |          2624 |
		| North Las Vegas |          2438 |
		| Markham         |          2352 |
		| Champaign       |          2029 |
		| Stuttgart       |          1849 |
		| Surprise        |          1520 |
		| Lakewood        |          1465 |
		| Goodyear        |          1155 |
		+-----------------+---------------+
		(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

	SQL code used to arrive at answer:

		-- select the stars column and and sum the review_count column to get a complete total of reviews 
		SELECT stars
			, SUM(review_count) AS total_reviews
		-- query the business table
		FROM business
		-- specify that we only want this data for the city 'Avon'
		WHERE city = 'Avon'
		-- group the data by stars so that SUM(review_count) sums the reviews by stars
		GROUP BY stars
		-- order the data by ascending stars
		ORDER BY stars;


	Copy and Paste the Resulting Table Below (2 columns – star rating and count):

		+-------+---------------+
		| stars | total_reviews |
		+-------+---------------+
		|   1.5 |            10 |
		|   2.5 |             6 |
		|   3.5 |            88 |
		|   4.0 |            21 |
		|   4.5 |            31 |
		|   5.0 |             3 |
		+-------+---------------+


ii. Beachwood

	SQL code used to arrive at answer:

		-- select the stars column and and sum the review_count column to get a complete total of reviews 
		SELECT stars
			, SUM(review_count) as total_reviews
		-- query the business table
		FROM business
		-- specify that we only want this data for the city 'Beachwood'
		WHERE city = 'Beachwood'
		-- group the data by stars so that SUM(review_count) sums the reviews by stars
		GROUP BY stars
		-- order the data by ascending stars
		ORDER BY stars;


	Copy and Paste the Resulting Table Below (2 columns – star rating and count):

		+-------+---------------+
		| stars | total_reviews |
		+-------+---------------+
		|   2.0 |             8 |
		|   2.5 |             3 |
		|   3.0 |            11 |
		|   3.5 |             6 |
		|   4.0 |            69 |
		|   4.5 |            17 |
		|   5.0 |            23 |
		+-------+---------------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

		-- select id, name, and sum the review_count column to get a complete total of reviews for each user
		SELECT id
			, name
			, SUM(review_count) as total_reviews
		-- query the user table
		FROM user
		-- group the data by id and name so that SUM(review_count) sums the reviews by user
		GROUP BY id
			, name
		-- order the data by descending total_reviews
		ORDER BY total_reviews DESC
		-- limit the query to only 3 results so that we get the top 3 users
		LIMIT 3;
	
		
	Copy and Paste the Result Below:
	
		+------------------------+--------+---------------+
		| id                     | name   | total_reviews |
		+------------------------+--------+---------------+
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |          2000 |
		| -3s52C4zL_DHRK0ULG6qtg | Sara   |          1629 |
		| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |          1339 |
		+------------------------+--------+---------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
		Posting more reviews does not always correlate with more fans. Query_1 below shows the top users by review count.
		While all of these users do seem to have some number of fans, there does not seem to be a definitive correlation between
		increased number of reviews and total fans. When organizing the data by total fans (Query_2), this observation is made even
		more apparent. The top users based on fan count do not always have a particularly high review count. Furthermore, taking
		these two queries together, there does seem to be a noticeable difference between the top users for review count versus the top 
		users for fan count. This conclusion is based off of looking at the top users when it comes to review count and fan count.
		But there does seem to be some evidence that it may not always be true, especially when considering users with lower review
		counts. Query_3 can be used to figure out the biggest number of fans that any user with a specific review count has. 
		For example, the highest fan count out of all the users that have 1 total review is 1 fan. If we increase the review count that
		we want to look at from 1 to 5 to 20, etc., we see that there is a noticeable increase in the maximum number of fans that a user
		with that particular review count has. While the increase isn't always linear, this trend does seem to suggest that some
		amount of posting reviews is needed to increase fan count or, at the very least, that posting reviews increases a user's 
		potential to increase their fan count. Therefore, posting more reviews does not always correlate with more fans, but it may be
		especially useful when one has a lower review count. Lastly, one interesting observation of the data is that there does seem to be a 
		correlation between fan count and usefulness ratings. Query_4 shows the top users by usefulness rating with a review count greater 
		than 1000. From these results, we see that, for high review count users, usefulness increases as fan count increases. Overall, these 
		findings suggest that users who have already posted a lot and are looking to increase fan count should not focus on quantity 
		(number of reviews) and, instead, improve their quality (usefulness).


	SQL code:

		-- Query_1
		SELECT id
			, name
			, yelping_since
			, review_count
			, fans
			, useful
			, funny
			, cool
		FROM user
		ORDER BY review_count DESC;

		-- Query_2
		SELECT id
			, name
			, yelping_since
			, review_count
			, fans
			, useful
			, funny
			, cool
		FROM user
		ORDER BY fans DESC;

		-- Query 3
		SELECT id
			, name
			, yelping_since
			, review_count
			, fans
		FROM user
		WHERE review_count <= 1
		ORDER BY review_count DESC, fans DESC;

		-- Query 4
		SELECT id
			, name
			, yelping_since
			, review_count
			, fans
			, useful
		FROM user
		WHERE review_count >= 1000
		ORDER BY useful DESC;

	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are 1780 reviews with the word 'love' and 232 reviews with the word 'hate'. Therefore,
	there are more reviews with the word 'love' than 'hate' in them.

	
	SQL code used to arrive at answer:

		-- count all the columns that meet a certain condition
		SELECT COUNT(*) as total
		-- query the review table
		FROM review
		-- condition specifying that the query returns reviews containing a specific word where 'word' can be replaced with 'love' and 'hate'
		WHERE text LIKE '%word%';

	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
		
		-- select all the id, name, and fans column
		SELECT id
			, name
			, fans
		-- query the user table
		FROM user
		-- order the results by descending number of fans
		ORDER BY fans DESC
		-- only show the top 10 results
		LIMIT 10;
	
	
	Copy and Paste the Result Below:

		+------------------------+-----------+------+
		| id                     | name      | fans |
		+------------------------+-----------+------+
		| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
		| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
		| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
		| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
		| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
		| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
		| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
		| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
		| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
		| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
		+------------------------+-----------+------+

		
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

	City: Toronto
	Category: Restaurants
	
i. Do the two groups you chose to analyze have a different distribution of hours?

	Answer: Yes, the two groups did have a different distribution of hours. The 2-3 star restaurants are, on average, open from
	mid-morning until the end of the day. On the other hand, 4-5 star restaurants seemed only to be open for dinner service. One 4 star
	restaurant, Edulis, was also only open for 5 days a week as opposed to 7 days like the rest of the restaurants that were returned.

ii. Do the two groups you chose to analyze have a different number of reviews?

	Answer: The two groups did seem to have a different number of reviews. By total, the 4-5 star group had 123 reviews as compared
	to the 86 of the 2-3 star group. However, the distribution of reviews among each group was not equal. Restaurants in the 2-3 star
	group had 5, 34, and 47 reviews respectively. On the other hand, restaurants in the 4-5 star group had 8, 26, and 89 stars respectively.
	Therefore, although the 4-5 star group had more stars than the 2-3 star group, the number of reviews a restuarant had did not seem to 
	depend on how the restuarant was rated based on stars.
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

	Answer: After examining both the neighborhood and postal codes of the different restaurants, there does not seem to be any definitive 
	connections that can be made between each group and location. There was one consistency with 2 restaurants from the 2-3 star group both
	being in the Downtown Core neighborhood. However, with only 3 resturants in each group, this sample size is just too small to make any 
	confident conclusions about patterns that exist between location and restaurant rating.

	SQL code used for analysis:

		SELECT b.name
			-- star bins
			, CASE
				WHEN stars BETWEEN 2 AND 3 THEN '2-3 stars'
				WHEN stars BETWEEN 4 AND 5 THEN '4-5 stars' 
			END AS rating
			, b.stars
			-- day order
			, CASE
				WHEN hours LIKE '%Monday%' THEN '(1) Monday'
				WHEN hours LIKE '%Tuesday%' THEN '(2) Tuesday'
				WHEN hours LIKE '%Wednesday%' THEN '(3) Wednesday'
				WHEN hours LIKE '%Thursday%' THEN '(4) Thursday'
				WHEN hours LIKE '%Friday%' THEN '(5) Friday'
				WHEN hours LIKE '%Saturday%' THEN '(6) Saturday'
				WHEN hours LIKE '%Sunday%' THEN '(7) Sunday'
			END AS day 
			, h.hours
			, b.review_count
			, b.neighborhood
			, b.postal_code
		FROM business b
		INNER JOIN category c ON b.id = c.business_id
		INNER JOIN hours h ON b.id = h.business_id
		WHERE b.city = 'Toronto' AND c.category = 'Restaurants' AND rating IS NOT NULL
		-- add DESC after 'b.stars' and 'b.review_count' to view the rest of the data as the coursera site only returns 25 rows
		ORDER BY b.stars
			, b.review_count
			, b.name
			, day;


		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones 
that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

	Answer: One difference between closed and open stores is the number of businesses in each group. There are 1520 businesses that are closed
	and 8480 businesses that are open. This is a difference of 6,960 between the two groups.
         
         
ii. Difference 2:

	Answer: Another difference between the closed and open stores is average stars. Closed stores have an average rating of about 3.52 stars
	while open stores have an average rating of about 3.68 stars.   
         
         
SQL code used for analysis:

	SELECT is_open 
		, COUNT(DISTINCT (id)) AS total_businesses
		, AVG(stars) AS avg_stars
		, MIN(stars) AS lowest_rating
		, MAX(stars) AS highest_rating
		, SUM(review_count) AS total_reviews
		, AVG(review_count) AS avg_reviews
	FROM business
	GROUP BY is_open;


	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and 
are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find 
commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will 
have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want 
to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

	Answer: Examine the relationship between businesses stars and useful reviews.
         

ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

	Answer: To conduct this analysis, for each business, we want to select identifiers (id and name), star rating, and number of total reviews.
	While we are specifically interested in looking at star rating and useful reviews, being able to look at total reviews gives us context about
	the rest of the data. For reviews, we want to select a count of reviews that have at least 1 useful rating for each business. Lastly, we want 
	to create a meaningful measure to compare to a business' star rating. For this, we calculate the percentage of total reviews that are considered 
	useful. This is a much better metric than just total usefulness reviews because there is a lot of variation in a business' total reviews.
	For example, 1 business might have 40 total reviews and another might only have 10 reviews. It would not be surprising if the business with 
	40 total reviews had more useful reviews. Therefore, it is a bit more meaningful to compare businesses based on their proportion of useful reviews
	rather than just the raw total of useful reviews. Further, to gain an even deeper examination of the relationship between stars and useful reviews,
	it is helpful to exclude some businesses from the analysis if they do not reach a minimum threshold of total reviews. In this case,
	percentages maintain their integrity. For example, if a business has 1 total review and that review is useful, then that business would have
	100% useful reviews. This would definitely skew the data during the final analysis. As a result, we implement a minimum requirement of at least
	10 total reviews for a business to be included in the analysis.
                           
                  
iii. Output of your finished dataset:

	+------------------------+----------------------------------------------------+-------+--------------------------+---------------+-------------------+
	| id                     | name                                               | stars | number_of_useful_reviews | total_reviews | percentage_useful |
	+------------------------+----------------------------------------------------+-------+--------------------------+---------------+-------------------+
	| -gra51XIR3wj6L3ukmPMfQ | Harris Teeter                                      |   1.5 |                        1 |            11 |              9.09 |
	| 0nc1B-3rKnvFawMtf8Swgw | Mayflower Cab Company                              |   1.5 |                        1 |            17 |              5.88 |
	| 251cOqWFI9t0udLSdS6SCA | Aki Da Japanese Seafood House                      |   2.0 |                        1 |            21 |              4.76 |
	| 320OZzvDKiW6wvVaTjbSjQ | B&B Theatres Mesa Gateway 12 IMAX                  |   2.0 |                        1 |            48 |              2.08 |
	| -xC1h0CMZgbW9z8cxwI6pw | Best Buy                                           |   2.0 |                        1 |            84 |              1.19 |
	| 2tHWNuSOkKCpRdEVLaRGmA | CIK Telecom                                        |   2.0 |                        1 |            11 |              9.09 |
	| 2IvrdAb6zdxr3ZqplqJHbg | Jose Cuervo Tequileria                             |   2.0 |                        1 |           414 |              0.24 |
	| 0HG02r8ri7GEFwuwmdHCyg | KFC                                                |   2.0 |                        2 |            45 |              4.44 |
	| 1tuXxG5Zmoj6mIX3oT7GtQ | Keffer Chrysler Jeep Dodge Ram                     |   2.0 |                        2 |            33 |              6.06 |
	| 0rpYVRB4ZDTf1Vn89a1Yfg | Markham Honda                                      |   2.0 |                        1 |            12 |              8.33 |
	| 2tiFUn8EU0EpjWBHjt1L6w | Wok Cafe                                           |   2.0 |                        1 |            28 |              3.57 |
	| 1skTxDMBQSpElbLfhBgmVQ | China Joy                                          |   2.5 |                        1 |            26 |              3.85 |
	| -P76AJ-L73FvsgqO4RnG2A | Crowne Plaza Resort Phoenix - Chandler Golf Resort |   2.5 |                        1 |           106 |              0.94 |
	| 1FAvxOUOGGyZoYNlAXACag | Dal Toro Ristorante                                |   2.5 |                        3 |           324 |              0.93 |
	| -n1g9MdeG46v1-gzZ4ldvQ | Del Taco                                           |   2.5 |                        1 |            15 |              6.67 |
	| 0qet57CmMA5qUm6gPFUTpg | Di Fara Pizza                                      |   2.5 |                        1 |            92 |              1.09 |
	| 2g6x4ISNiMxFnotBuwmZmw | Dos Gringos                                        |   2.5 |                        1 |           108 |              0.93 |
	| 19umlhmVB9O3njIBfRAe8g | Fiesta Rancho                                      |   2.5 |                        1 |            80 |              1.25 |
	| -9YyInW1wapzdNZrhQJ9dg | Fresh Buffet                                       |   2.5 |                        2 |           160 |              1.25 |
	| 2NsEac9xCBI05bo5l4yI7Q | Hertz Rent A Car                                   |   2.5 |                        1 |           379 |              0.26 |
	| 1NZonnS3SpogXaZJigVgqA | Kim Po Vietnamese Restaurant                       |   2.5 |                        1 |            69 |              1.45 |
	| 2uLU7C6-59QKdiTaw4Bf3g | LA Fitness                                         |   2.5 |                        2 |            89 |              2.25 |
	| 2lAvN0x40Sgg5-rG8WEj3w | Linda Woodson Dermatology                          |   2.5 |                        1 |            48 |              2.08 |
	| 30PzafMyWvh5fYZ8yV_qBg | Lunch Box                                          |   2.5 |                        1 |            35 |              2.86 |
	| -U7tvCtaraTQ9b0zBhpBMA | MGM Grand Buffet                                   |   2.5 |                        1 |           961 |               0.1 |
	+------------------------+----------------------------------------------------+-------+--------------------------+---------------+-------------------+
	(Output limit exceeded, 25 of 451 total rows shown)
         
         
iv. Provide the SQL code you used to create your final dataset:

	-- select the id, name, and review_count from the business table; select a count of reviews that are useful for each business;
	-- calculate number of useful reviews divided by total reviews for each business to obtain a percentage of useful reviews
	SELECT b.id
		, b.name
		, b.stars
		, COUNT(r.useful) AS number_of_useful_reviews
		, b.review_count AS total_reviews
		, ROUND(((COUNT(r.useful)*1.0)/(b.review_count*1.0)*100),2) AS percentage_useful
	FROM business b
	INNER JOIN review r ON b.id = r.business_id
	-- group by business name so that calculations above occur by business
	GROUP BY b.name
	-- minimum requirement of reviews to be considered in analysis
	HAVING review_count >= 10
	ORDER BY b.stars;